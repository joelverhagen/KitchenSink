using System.Collections.Generic;
using System.Net.Http;
using Knapcode.KitchenSink.Http.Handlers;
using Knapcode.KitchenSink.Http.Logging;
using Knapcode.KitchenSink.Support;

namespace Knapcode.KitchenSink.Extensions
{
    public static class HttpRequestMessageExtensions
    {
        /// <summary>
        /// Try to get the redirect history from a <see cref="HttpRequestMessage" />, generated by <see cref="RedirectingHandler" />.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <param name="redirectHistory">The history.</param>
        /// <returns>Whether or not the history was found.</returns>
        public static bool TryGetRedirectHistory(this HttpRequestMessage request, out IEnumerable<HttpResponseMessage> redirectHistory)
        {
            return TryGetHttpRequestMessageProperty(request, RedirectingHandler.RedirectHistoryKey, out redirectHistory);
        }

        /// <summary>
        /// Try to get the stored HTTP session from a <see cref="HttpRequestMessage" />, generated by <see cref="LoggingHandler" />.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <param name="storedHttpSession">The session.</param>
        /// <returns>Whether or not the session was found.</returns>
        public static bool TryGetStoredHttpSession(this HttpRequestMessage request, out StoredHttpSession storedHttpSession)
        {
            return TryGetHttpRequestMessageProperty(request, LoggingHandler.StoredHttpSessionKey, out storedHttpSession);
        }

        private static bool TryGetHttpRequestMessageProperty<T>(this HttpRequestMessage request, string key, out T value)
        {
            Guard.ArgumentNotNull(request, "request");
            Guard.ArgumentNotNull(request, "key");

            object rawObject;
            if (!request.Properties.TryGetValue(key, out rawObject) || !(rawObject is T))
            {
                value = default(T);
                return false;
            }

            value = (T) rawObject;
            return true;
        }
    }
}