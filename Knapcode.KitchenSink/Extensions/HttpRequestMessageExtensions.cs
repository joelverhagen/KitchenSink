using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using Knapcode.KitchenSink.Http.Handlers;
using Knapcode.KitchenSink.Http.Logging;
using Knapcode.KitchenSink.Support;

namespace Knapcode.KitchenSink.Extensions
{
    public static class HttpRequestMessageExtensions
    {       
        /// <summary>
        /// Try to get the latest stored HTTP session from a <see cref="HttpRequestMessage" />, generated by <see cref="LoggingHandler" />.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <param name="storedHttpSession">The session.</param>
        /// <returns>Whether or not the session was found.</returns>
        public static bool TryGetStoredHttpSession(this HttpRequestMessage request, out StoredHttpSession storedHttpSession)
        {
            IEnumerable<StoredHttpSession> storedHttpSessions;
            if (TryGetHttpRequestMessageProperty(request, LoggingHandler.StoredHttpSessionKey, out storedHttpSessions))
            {
                storedHttpSession = storedHttpSessions.LastOrDefault();
                return storedHttpSession != null;
            }

            storedHttpSession = null;
            return false;
        }

        /// <summary>
        /// Get the latest stored HTTP session from a <see cref="HttpRequestMessage"/>, generated by <see cref="LoggingHandler"/>.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <returns>The session.</returns>
        public static StoredHttpSession GetStoredHttpSession(this HttpRequestMessage request)
        {
            return request.GetTryValue<HttpRequestMessage, StoredHttpSession>(TryGetStoredHttpSession);
        }

        /// <summary>
        /// Try to get the stored HTTP sessions from a <see cref="HttpRequestMessage" />, generated by <see cref="LoggingHandler" />.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <param name="storedHttpSession">The sessions.</param>
        /// <returns>Whether or not the sessions were found.</returns>
        public static bool TryGetStoredHttpSessions(this HttpRequestMessage request, out IEnumerable<StoredHttpSession> storedHttpSession)
        {
            return TryGetHttpRequestMessageProperty(request, LoggingHandler.StoredHttpSessionKey, out storedHttpSession);
        }

        /// <summary>
        /// Get the stored HTTP sessions from a <see cref="HttpRequestMessage"/>, generated by <see cref="LoggingHandler"/>.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <returns>The sessions.</returns>
        public static IEnumerable<StoredHttpSession> GetStoredHttpSessions(this HttpRequestMessage request)
        {
            return request.GetTryValue<HttpRequestMessage, IEnumerable<StoredHttpSession>>(TryGetStoredHttpSessions);
        }

        private static bool TryGetHttpRequestMessageProperty<T>(this HttpRequestMessage request, string key, out T value)
        {
            Guard.ArgumentNotNull(request, "request");
            Guard.ArgumentNotNull(request, "key");

            object rawObject;
            if (!request.Properties.TryGetValue(key, out rawObject) || !(rawObject is T))
            {
                value = default(T);
                return false;
            }

            value = (T) rawObject;
            return true;
        }
    }
}