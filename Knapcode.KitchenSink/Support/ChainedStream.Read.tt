<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
using System.Threading;
using System.Threading.Tasks;

namespace Knapcode.KitchenSink.Support
{
    public partial class ChainedStream
    {
<# foreach(bool isAsync in new[] { false, true })
    {
    #>
        public override <#=(isAsync ? "async Task<" : "")#>int<#=(isAsync ? ">" : "")#> Read<#=(isAsync ? "Async" : "")#>(byte[] buffer, int offset, int count<#=(isAsync ? ", CancellationToken cancellationToken" : "")#>)
        {
            // start the stream enumerator
            if ((!_started && !(_started = _streams.MoveNext())) || _finished)
            {
                return 0;
            }

            // read the streams until the desired amount is returned
            // TODO: support reading > 0 but < count
            var totalRead = 0;
            while (totalRead < count)
            {
                var read = <#=(isAsync ? "await " : "")#>_streams.Current.Read<#=(isAsync ? "Async" : "")#>(buffer, offset + totalRead, count - totalRead<#=(isAsync ? ", cancellationToken" : "")#>);
                if (read == 0)
                {
                    if (_disposeOnCompletion)
                    {
                        _streams.Current.Dispose();
                    }

                    if (!_streams.MoveNext())
                    {
                        _finished = true;
                        return totalRead;
                    }
                }

                totalRead += read;
            }

            return totalRead;
        }<#=(isAsync ? "" : "\r\n")#>
<#
    }
    #>
    }
}